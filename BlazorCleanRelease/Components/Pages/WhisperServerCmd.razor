@page "/whisper-server"

@rendermode InteractiveServer

@using System.Diagnostics;
@using System.Text;
@using FFMpegCore;

@inject IJSRuntime JSRuntime;

<PageTitle>Whisper</PageTitle>
<h2 style="font-family: 'Arial', sans-serif; color: #333; text-align: center; margin-top: 20px;">Whisper.net on GPU</h2>
<br />
<MudText Typo="Typo.subtitle2" style="color: #0077cc;">
    Язык перевода Авто (обычно английский) даёт лучший результат
    <MudCheckBox Size="Size.Small" @bind-Value="@gpu_cpu">Использовать ресурсы видеокарты</MudCheckBox>
</MudText>

<MudPaper Class="pa-4 mud-height-full" style="background-color: #eee; border-radius: 8px; box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);">
    <table style="border-collapse: collapse; width: 100%;">
        <tr style="border-bottom: 1px solid #ddd;">
            <td style="width: 200px;">
                <MudText Typo="Typo.subtitle2" style="color: #0077cc;">Язык перевода:</MudText>
            </td>
            <td>
                <InputSelect @bind-Value="selectedLanguage" style="width: 100%;">
                    <option value="auto">Авто</option>
                    <option value="ru">Русский</option>
                    <option value="en">Английский</option>
                </InputSelect>
            </td>
        </tr>
        <hr style="border: none; height: 1px; background-color: #ddd; margin: 10px 0;" />
        <tr style="border-bottom: 1px solid #ddd;">
            <td style="width: 200px;">
                <MudText Typo="Typo.subtitle2" style="color: #0077cc;">Модель Whisper:</MudText>
            </td>
            <td>
                <InputSelect @bind-Value="modelFileName" style="width: 100%;">
                    <option value="D:\WhisperModel\ggml-base.bin">ggml-base.bin</option>
                    <option value="D:\WhisperModel\ggml-small.bin">ggml-small.bin</option>
                    <option value="D:/WhisperModel/ggml-medium.bin">ggml-medium.bin</option>
                    <option value="D:/WhisperModel/ggml-large-v3.bin">ggml-large-v3.bin</option>
                </InputSelect>
            </td>
        </tr>
    </table>
</MudPaper>

<br />
<MudText Typo="Typo.subtitle2" style="color: #0077cc;">
    Загрузите аудио или видео файл:
</MudText>

@if (!isUsing)
{
    <MudPaper style="padding-bottom: 18px; padding-left: 15px; align-items: center; align-self: center; background-color: #eee; border-radius: 8px; box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);">
        <InputFile id="inputFile" OnChange="@(async (f) => await OnFileChange(f))" style="margin-top: 20px;">
            Выберите файл
        </InputFile>
    </MudPaper>
}
else
{
    <MudPaper style="padding-bottom: 18px; padding-left: 15px; align-items: center; align-self: center; background-color: #eee; border-radius: 8px; box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);">
        <button disabled style="margin-top: 20px;">Идёт выполнение процесса, подождите...</button>
    </MudPaper>
}


<br />
<div style="display:flex; height: 40px; align-items: center;">
    @if (start)
    {
        <MudText Typo="Typo.subtitle1" style="color: #0077cc;">Выполнено: @currentProgress%</MudText>

    }
    &nbsp; &nbsp; &nbsp;
    @if (isVisible)
    {
        <MudText Typo="Typo.subtitle2" style="color: #0077cc;"> &nbsp; Пожалуйста, подождите...&nbsp; &nbsp;&nbsp; &nbsp;</MudText>
        <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
    }
    @if (txtAudioToTextResult != "")
    {
        <button style="height: 24px; padding: 0px 8px; margin-left:20px; border:1px solid #444; border-radius: 3px; color:black; background-color: #f1f1f1;" @onclick="SaveTextToFile">Сохранить</button>
    }<br />
</div>
<br />
<MudPaper Class="pa-4 mud-height-full" style="background-color: #f9f9f9; border-radius: 8px; box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);">
    <MudText Style="white-space: pre-wrap; max-width: 100%; background-color: #f5f5f5; padding: 10px; border-radius: 5px; margin-top: 10px;" Color="Color.Info">@txtEventsResult</MudText>

    <MudText Style="white-space: pre-wrap; max-width: 100%;  padding: 10px; border-radius: 5px;" Color="Color.Dark">@txtAudioToTextResult</MudText>
</MudPaper>
<br />

@code
{
    bool gpu_cpu { get; set; } = true;
    bool isVisible = false;
    bool isUsing = false; // доступность кнопки выбора файла
    bool start = false; // отображение процентов проргесса выполнения
    StringBuilder outputBuilder = new StringBuilder();
    int durationOfWav = 0;
    private int currentProgress = 0;
    string txtEventsResult = string.Empty; // вывод в консоль
    string txtAudioToTextResult = string.Empty; // вывод текста аудио
    string pathToSaveTempAudio = @"C:\temp\1";
    string ffmpegExePath = @"C:\dotnet\ffmpeg\ffmpeg.exe";

    string modelFileName = @"D:\WhisperModel\ggml-base.bin";
    string selectedLanguage = "auto";
    string outputTextFileName = @"C:\temp\1\1.txt";
    static string whisperFolderPath = @"C:\dotnet\_assambling_projects\consoleWavToTextOnGPU\";
    static string whisperFolderPath2 = @"C:\dotnet\_assambling_projects\consoleWavToTextSimpleOnCPU\";
    static string whisperExeName = @"ClblastGpu.exe";
    static string whisperExeName2 = @"Simple.exe";
    string whisperExePath = whisperFolderPath + whisperExeName;
    string whisperExePath2 = whisperFolderPath2 + whisperExeName2;


    ////////////////////////////////////////////////////////////////////////////////////////////
    private void CleanupTempFiles()
    {
        Directory.Delete(pathToSaveTempAudio, true);
    }
    ////////////////////////////////////////////////////////////////////////////////////////////
    private async void SaveTextToFile()
    {
        await JSRuntime.InvokeVoidAsync("saveAsFile", txtAudioToTextResult, "output.txt"); // Вызов JavaScript функции для сохранения файла
    }

    ////////////////////////////////////////////////////////////////////////////////////////////
    private async Task OnFileChange(InputFileChangeEventArgs e)
    {
        isUsing = true;
        start = true;
        currentProgress = 0;
        txtEventsResult = "Консоль:\n";
        txtAudioToTextResult = "";

        var file = e.File;
        // Create the directory if it doesn't exist. Generate a file name
        DirectoryInfo dirInfo = new DirectoryInfo(pathToSaveTempAudio);
        if (!dirInfo.Exists) dirInfo.Create();

        var ramdomFileName = Path.GetRandomFileName();
        var ramdomFileNameWithPath = Path.Combine(pathToSaveTempAudio, ramdomFileName);

        // Save the file to the specified folder on Server
        if (file != null)
        {
            try
            {
                long maxAllowedInputFileSize = 1024 * 1024 * 128; // 128 MB
                using (var fileStream = file.OpenReadStream(maxAllowedInputFileSize))
                {
                    using (var fileOutput = new FileStream(ramdomFileNameWithPath, FileMode.Create))
                    {
                        byte[] buffer = new byte[8192]; // Buffer size for copying in chunks
                        int bytesRead;
                        while ((bytesRead = await fileStream.ReadAsync(buffer, 0, buffer.Length)) > 0)
                        {
                            await fileOutput.WriteAsync(buffer, 0, bytesRead);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"An error occurred: {ex.Message}");
            }
        }

        Console.WriteLine($"\nSuccess to save file! {ramdomFileNameWithPath}");
        txtEventsResult += $"{("Файл сохранён!").PadRight(33, '=')}>{ramdomFileNameWithPath}";

        await RunFFmpeg(ramdomFileNameWithPath);
        txtEventsResult += $"\n{("FFmpeg в wav:").PadRight(33, '=')}>{ramdomFileNameWithPath}.wav";

        isVisible = true;

        StateHasChanged();
        System.Threading.Thread.Sleep(100);
        currentProgress = 2;

        try
        {
            var mediaInfo = await FFProbe.AnalyseAsync($"{ramdomFileNameWithPath}.wav");
            durationOfWav = Convert.ToInt32(mediaInfo.PrimaryAudioStream?.Duration.TotalSeconds);
        }
        catch(Exception ex)
        {
            Console.WriteLine(ex.Message);
        }

        txtEventsResult += $"\nАнализ Whisper.Net...";
        await RunWhisper($"{ramdomFileNameWithPath}.wav");
        isVisible = false;

        Console.WriteLine($"Чтение содержимого файла: {outputTextFileName}");
        txtAudioToTextResult = System.IO.File.ReadAllText(outputTextFileName);

        Console.WriteLine($"Завершено! Спасибо за использование!");

        isUsing = false;
        StateHasChanged();
        //await JSRuntime.InvokeVoidAsync("toggleInputFileDisabled", isUsing);
    }
    ////////////////////////////////////////////////////////////////////////////////////////////
    private async Task RunFFmpeg(string inputFileName)
    {
        string outputFileName = $"{inputFileName}.wav";
        string ffmpegCommandParams = $@"-i {inputFileName} -codec:a pcm_s16le -b:a 128k -ac 1 -ar 16000 {outputFileName}";

        await RunCmdCommand(ffmpegExePath, ffmpegCommandParams);
        Console.WriteLine($"FFmpeg в wav: {outputFileName}");
    }
    ////////////////////////////////////////////////////////////////////////////////////////////
    private async Task RunWhisper(string audioFileName)
    {
        whisperExePath = gpu_cpu ? whisperFolderPath + whisperExeName : whisperFolderPath2 + whisperExeName2;

        outputTextFileName = $"{audioFileName}.txt";

        string whisperCommandParams = $@"{modelFileName} {audioFileName} {outputTextFileName} {selectedLanguage}";
        await RunCmdCommand(whisperExePath, whisperCommandParams);
        
        currentProgress = 100; // Считаем, что процесс завершен на 100%
        StateHasChanged();
    }
    ////////////////////////////////////////////////////////////////////////////////////////////
    private async Task RunCmdCommand(string executablePath, string command)
    {
        ProcessStartInfo startInfo = new ProcessStartInfo
            {
                FileName = "cmd.exe",
                RedirectStandardInput = true,
                RedirectStandardOutput = true,
                UseShellExecute = false,
                CreateNoWindow = true
            };
        
        using (Process process = new Process { StartInfo = startInfo })
        {
            process.OutputDataReceived += (sender, e) =>
            {
                if (!string.IsNullOrEmpty(e.Data))
                {
                    Console.WriteLine(e.Data); // Выводим данные из stdout процесса в консоль

                    // Update the UI with the new data Выводим данные из stdout процесса в Blazor
                    InvokeAsync(() =>
                    {
                        // Update the UI with the new data

                        string beforeTime = "->";
                        int indexOfTimePosition = e.Data.IndexOf(beforeTime);
                        if (indexOfTimePosition != -1) {
                            string time = e.Data.Substring(indexOfTimePosition + beforeTime.Length, 8); // 8 = 00:01:05
                            TimeSpan timeSpan = TimeSpan.Parse(time);
                            currentProgress = (int)(100 * timeSpan.TotalSeconds / durationOfWav);
                            currentProgress = currentProgress > 100 ? 99 : currentProgress;
                            Console.WriteLine($"Прогресс: {currentProgress}");
                        }
                        StateHasChanged();
                    });
                }
            };

            process.Start();

            using (StreamWriter sw = process.StandardInput)
            {
                if (sw.BaseStream.CanWrite)
                {
                    sw.WriteLine($"c: cd");
                    sw.WriteLine($"cd {Path.GetDirectoryName(executablePath)}");
                    sw.WriteLine($"{Path.GetFileName(executablePath)} {command}");
                    sw.WriteLine("exit");
                }
            }
            process.BeginOutputReadLine(); // Начинаем асинхронное чтение stdout
            await Task.Run(() => process.WaitForExit()); // Ждем завершения процесса

        }
    }

}
