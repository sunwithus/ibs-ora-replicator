@using BlazorCleanRelease.Components.Classes;
@inject IJSRuntime JSRuntime;

<br /><br />
<h4>Выберите необходимые аудиофайлы:</h4>
<p>
    <label>
        До @maxAllowedFiles файлов за раз размером до @(maxFileSize/1024/1024) Мб:
        <br />
        <MudButton Variant="Variant.Filled"
                   Color="@colorButton"
                   StartIcon="@Icons.Material.Filled.CloudUpload">
            <InputFile @onclick="BeforeLoadFiles" OnChange="LoadFiles" multiple />
        </MudButton>
    </label>
</p>


@if (isLoading)
{
    <p>Progress: @string.Format("{0:P0}", progressPercent)</p>
}
else if (isVisible)
{

    <MudSimpleTable Hover="true" Dense="true" FixedHeader="true" Style="height:150px;">
        <thead>
            <tr>
                <th>Имя файла:</th>
                <th>Дата создания:</th>
                <th>Размер (байт):</th>
                <th>Тип файла:</th>
            </tr>
        </thead>
        <tbody>
        @foreach (var file in loadedFiles)
        {
            <tr>
                <td>@file.Name</td>
                <td>@file.LastModified.ToString()</td>
                <td>@file.Size</td>
                <td>@file.ContentType</td>
            </tr>
        } 
        </tbody>
    </MudSimpleTable>

}

@code {
    [Parameter]
    public string pathToSaveTempAudio { get; set; } = "";
    [Parameter]
    public bool onlyAudioType { get; set; } = true;
    [Parameter]
    public MudBlazor.Color colorButton { get; set; } = Color.Primary;

    private List<IBrowserFile> loadedFiles = new();
    private long maxFileSize = 1024 * 1024 * 512;
    private int maxAllowedFiles = 10000;
    private bool isLoading;
    private bool isVisible = false;
    private decimal progressPercent;

    private async void BeforeLoadFiles()
    {
        isVisible = false;
        await JSRuntime.InvokeVoidAsync("hideElement", "startibs");
    }

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        isLoading = true;
        isVisible = false;
        loadedFiles.Clear();
        // предварительная очистка директории
        Operations operationWithFiles = new Operations();
        operationWithFiles.clearFolder(pathToSaveTempAudio);

        progressPercent = 0;

        foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
        {
            try
            {
                if (file.ContentType.Contains("audio"))
                {
                    //var trustedFileName = Path.GetRandomFileName();
                    var trustedFileName = file.Name;
                    string filePath = Path.Combine(pathToSaveTempAudio, trustedFileName);
                    Console.WriteLine(filePath);

                    await using FileStream writeStream = new(filePath, FileMode.Create);
                    using var readStream = file.OpenReadStream(maxFileSize);
                    var bytesRead = 0;
                    var totalRead = 0;
                    var buffer = new byte[1024 * 10];

                    while ((bytesRead = await readStream.ReadAsync(buffer)) != 0)
                    {
                        totalRead += bytesRead;
                        await writeStream.WriteAsync(buffer, 0, bytesRead);
                        if (file.Size != 0)
                        {
                            progressPercent = Decimal.Divide(totalRead, file.Size);
                        }
                        StateHasChanged();
                    }

                    loadedFiles.Add(file);

                    Console.WriteLine($"Unsafe Filename: {file.Name} File saved: {trustedFileName}");
                }

            }
            catch (Exception ex)
            {
                Console.WriteLine($"File: {file.Name} Error: {ex.Message}");
            }
        }

        isLoading = false;
        isVisible = true;

        await JSRuntime.InvokeVoidAsync("toggleElement", "startibs"); //js видимость кнопки пуск
    }

}
